{
  "Uuid": "694e1c49-b1d9-4c20-8f71-62359ee12b7e",
  "IsCustomNode": false,
  "Description": null,
  "Name": "room_to_mass",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "CoreNodeModels.ColorRange, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "f8a274d9316e4b5fa80a717846eb6868",
      "Inputs": [
        {
          "Id": "ec7a6b26fdc6419b9eae99fbbac8954b",
          "Name": "colors",
          "Description": "A list of colors to include in the range.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d5076fc68eaf48eaaefabb1f3c46a4d1",
          "Name": "indices",
          "Description": "A list of values between 0.0 and 1.0 which position the input colors along the range.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6f29aa72f16f465d8977b870ba516740",
          "Name": "value",
          "Description": "A list of values between 0.0 and 1.0. These values are used to look up the color within the range.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5f789ad5685b4d00bd124c76c3083852",
          "Name": "color",
          "Description": "The selected colors.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get a color given a color range."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Math.RemapRange@double[],double,double",
      "Id": "b0d02ea21d6e4e8f9d21e95603684728",
      "Inputs": [
        {
          "Id": "8c8e29df6f6a4e38abe4f303942893b6",
          "Name": "numbers",
          "Description": "List of numbers to adjust range of.\n\ndouble[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7126f9157fb74f16893c118aaeaa984f",
          "Name": "newMin",
          "Description": "New minimum of the range.\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ea0ef62aefb54ecaa1682c1e87ebc96d",
          "Name": "newMax",
          "Description": "New maximum of the range\n\ndouble\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "818c59b5c15e46fb91707a0f23f1d55b",
          "Name": "list",
          "Description": "List remapped to new range.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adjusts the range of a list of numbers while preserving the distribution ratio.\n\nMath.RemapRange (numbers: double[], newMin: double = 0, newMax: double = 1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;\n1;",
      "Id": "6633c25d30a646999f83e392f13a8be2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "45d12a175d2c4650964748feffbcc681",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7e4b5188997c4d01b37f21bcdfbc0fc9",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Modifiers.GeometryColor.ByGeometryColor@Autodesk.DesignScript.Geometry.Geometry,DSCore.Color",
      "Id": "facde8e7acda42d2ab80e1bb0de80e37",
      "Inputs": [
        {
          "Id": "6c0cfd3243234666874db2f15238e464",
          "Name": "geometry",
          "Description": "The geometry to which you would like to apply color.\n\nGeometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "24ca8114bf174028ba6a3c25b25dae91",
          "Name": "color",
          "Description": "The color.\n\nColor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3eab0881b7484ad2af6e6b110ca144c7",
          "Name": "GeometryColor",
          "Description": "A Display object.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Display geometry using a color.\n\nGeometryColor.ByGeometryColor (geometry: Geometry, color: Color): GeometryColor"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.OverrideColorInView@DSCore.Color",
      "Id": "7f95d9b972bb4e84a649a79e8e015689",
      "Inputs": [
        {
          "Id": "99e81be1214f4ad380f1755ed2c555f3",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d78e18d9b9a54b4587ac6878f169bfce",
          "Name": "color",
          "Description": "The color to apply to a solid fill on the element.\n\nColor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d8e04d30902949c191c3aeecbd599508",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Override the element's color in the active view.\n\nElement.OverrideColorInView (color: Color): Element"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 468,
      "SelectedString": "OST_Rooms",
      "NodeType": "ExtensionNode",
      "Id": "be7a43dd606e4f59b41346c60759b685",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4ae61f0f2eaf46f2b8460afbcb5d60b0",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "1ed6741a462e457bac9a441ee2c33a6f",
      "Inputs": [
        {
          "Id": "e4f05b4b6d214d1a8b349d30b96e34f6",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "197c2f8deea5473c8265b7ff352db126",
          "Name": "Elements",
          "Description": "An element type.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Color.ByARGB@int,int,int,int",
      "Id": "335d88fd9e204676854a110f64cef6f9",
      "Inputs": [
        {
          "Id": "3f6e0b5e1c6242c4ab6c242889919377",
          "Name": "a",
          "Description": "The alpha value.\n\nint\nDefault value : 255",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1a4c04263e9c4494a4b4d03787809b81",
          "Name": "r",
          "Description": "The red value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "54d09ce6e24c4c8286e8c13b5a93e103",
          "Name": "g",
          "Description": "The green value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ff681f600b3e47ff936bcbc94ec53353",
          "Name": "b",
          "Description": "The blue value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "522e1bfb146341ecbe5d2dc2423fc28d",
          "Name": "color",
          "Description": "Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Construct a color by alpha, red, green, and blue components.\n\nColor.ByARGB (a: int = 255, r: int = 0, g: int = 0, b: int = 0): Color"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Color.ByARGB@int,int,int,int",
      "Id": "84b0a7b7aaa04e7c82919cf6341b8a5b",
      "Inputs": [
        {
          "Id": "38a5e227138a440ab92ec14ddeaa4411",
          "Name": "a",
          "Description": "The alpha value.\n\nint\nDefault value : 255",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f9d3818a87a84ea3873e27585f1c5e2e",
          "Name": "r",
          "Description": "The red value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7de5b06ccbf046eabdf2d48e8b747c9d",
          "Name": "g",
          "Description": "The green value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "af61057c27c64fe586cb167bfba9f993",
          "Name": "b",
          "Description": "The blue value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "65e227d8d9d34ad38828b82db31a914a",
          "Name": "color",
          "Description": "Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Construct a color by alpha, red, green, and blue components.\n\nColor.ByARGB (a: int = 255, r: int = 0, g: int = 0, b: int = 0): Color"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Color.ByARGB@int,int,int,int",
      "Id": "9e13d6830b7b4521a4fbe58d296451cb",
      "Inputs": [
        {
          "Id": "e0ec0c7f52a7420a9e2004feb235022f",
          "Name": "a",
          "Description": "The alpha value.\n\nint\nDefault value : 255",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "177195ecf94542f8b8daf5d4e20c1de4",
          "Name": "r",
          "Description": "The red value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "159bd47d0c75467dba3fd569517c90c1",
          "Name": "g",
          "Description": "The green value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "45ca8e66f8a84d6cbacd8e1cd93e4e3e",
          "Name": "b",
          "Description": "The blue value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "66d70b100e8c4f7e96a71c04490ad075",
          "Name": "color",
          "Description": "Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Construct a color by alpha, red, green, and blue components.\n\nColor.ByARGB (a: int = 255, r: int = 0, g: int = 0, b: int = 0): Color"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;\n255;",
      "Id": "988920b7abeb47f796204a232dd4178d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "23a222cc421b4b6f811dea0e830d4b28",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6bd24e064da54807a9176ab718fb5e16",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "f2a819ecbfbc4c6a8c19add8b4746bbc",
      "Inputs": [
        {
          "Id": "bcf95daa578341c89a83a93554fc5e5a",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cb5e7190bf944e069373730365a1d04a",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b2ea462c1a0045bf9146d46f4b8e1f8b",
          "Name": "item2",
          "Description": "Item Index #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3dc0399c5e5f4685b59689b51078f21a",
          "Name": "list",
          "Description": "A list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;\n0.5;\n1;",
      "Id": "05f95cb8642d482ab1c76807bafaeeb1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0ae9a15b0417460d9d04511c0e4f693f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a9b781a152214496a79d7bebeb07e409",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a9bf4432f02c4e7c8209ff599480fbb3",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "fa67aa6d7b904170883ae8e1ce3386df",
      "Inputs": [
        {
          "Id": "4b0aa79df8b843b39cc0bb19bf1be40c",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "be7d5747ba3c4ff2bdc44f8783c372dc",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "65e363e7ab2248ed9d312aa69eb357d0",
          "Name": "item2",
          "Description": "Item Index #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b30951a0d3104634882c217277e1e7c3",
          "Name": "list",
          "Description": "A list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr #This is .NET's Common Language Runtime. It's an execution environment\r\n#that is able to execute code from several different languages.\r\nimport sys #sys is a fundamental Python library - here, we're using it to load in\r\n#the standard IronPython libraries\r\nsys.path.append('C:\\Program Files (x86)\\IronPython 2.7\\Lib') #Imports the\r\n#standard IronPython libraries, which cover everything from servers and\r\n#encryption through to regular expressions.\r\nimport System #The System namespace at the root of .NET\r\nfrom System import Array #.NET class for handling array information\r\nfrom System.Collections.Generic import * #Lets you handle generics. Revit's API\r\n#sometimes wants hard-typed 'generic' lists, called ILists. If you don't need\r\n#these you can delete this line.\r\nclr.AddReference('ProtoGeometry')  #A Dynamo library for its proxy geometry\r\n#classes. You'll only need this if you're interacting with geometry.\r\nfrom Autodesk.DesignScript.Geometry import * #Loads everything in Dynamo's\r\n#geometry library\r\nclr.AddReference(\"RevitNodes\") #Dynamo's nodes for Revit\r\nimport Revit #Loads in the Revit namespace in RevitNodes\r\nclr.ImportExtensions(Revit.Elements) #More loading of Dynamo's Revit libraries\r\nclr.ImportExtensions(Revit.GeometryConversion) #More loading of Dynamo's\r\n#Revit libraries. You'll only need this if you're interacting with geometry.\r\nclr.AddReference(\"RevitServices\") #Dynamo's classes for handling Revit documents\r\nimport RevitServices \r\nfrom RevitServices.Persistence import DocumentManager #An internal Dynamo class\r\n#that keeps track of the document that Dynamo is currently attached to\r\nfrom RevitServices.Transactions import TransactionManager #A Dynamo class for\r\n#opening and closing transactions to change the Revit document's database\r\n\r\nclr.AddReference(\"RevitAPI\") #Adding reference to Revit's API DLLs\r\nclr.AddReference(\"RevitAPIUI\") #Adding reference to Revit's API DLLs\r\n\r\nimport Autodesk #Loads the Autodesk namespace\r\nfrom Autodesk.Revit.DB import * #Loading Revit's API classes\r\nfrom Autodesk.Revit.UI import * #Loading Revit's API UI classes  \r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument #Finally, setting up handles to the active Revit document\r\nuiapp = DocumentManager.Instance.CurrentUIApplication #Setting a handle to the active Revit UI document\r\napp = uiapp.Application  #Setting a handle to the currently-open instance of the Revit application\r\nuidoc = uiapp.ActiveUIDocument #Setting a handle to the currently-open instance of the Revit UI application\r\n\r\nname=set(IN[0])\r\nOUT= name",
      "VariableInputPorts": true,
      "Id": "f1f7d424fd0643578bd86a84bf15280a",
      "Inputs": [
        {
          "Id": "53192f38c3aa434cae2b266ac037419b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2a40abc1ab364c3b867a9df371333ea2",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "9266cc47-e982-46fc-9fd4-59bd7fb19a53",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "20b1955f2023439b86ccd9942908601f",
      "Inputs": [
        {
          "Id": "4609a51bd0fd4179bd7e20fbbc98eeec",
          "Name": "element",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0625992aaa1e4dc5b3c1079ab678ffc9",
          "Name": "name",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Gets an element's name. Unlike the OOTB node, this node should work for all Revit elements that have names and will also return the localized names of system parameters, parameter groups, display unit types, parameter types, unit symbol types and unit types."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr #This is .NET's Common Language Runtime. It's an execution environment\r\n#that is able to execute code from several different languages.\r\nimport sys #sys is a fundamental Python library - here, we're using it to load in\r\n#the standard IronPython libraries\r\nsys.path.append('C:\\Program Files (x86)\\IronPython 2.7\\Lib') #Imports the\r\n#standard IronPython libraries, which cover everything from servers and\r\n#encryption through to regular expressions.\r\nimport System #The System namespace at the root of .NET\r\nfrom System import Array #.NET class for handling array information\r\nfrom System.Collections.Generic import * #Lets you handle generics. Revit's API\r\n#sometimes wants hard-typed 'generic' lists, called ILists. If you don't need\r\n#these you can delete this line.\r\nclr.AddReference('ProtoGeometry')  #A Dynamo library for its proxy geometry\r\n#classes. You'll only need this if you're interacting with geometry.\r\nfrom Autodesk.DesignScript.Geometry import * #Loads everything in Dynamo's\r\n#geometry library\r\nclr.AddReference(\"RevitNodes\") #Dynamo's nodes for Revit\r\nimport Revit #Loads in the Revit namespace in RevitNodes\r\nclr.ImportExtensions(Revit.Elements) #More loading of Dynamo's Revit libraries\r\nclr.ImportExtensions(Revit.GeometryConversion) #More loading of Dynamo's\r\n#Revit libraries. You'll only need this if you're interacting with geometry.\r\nclr.AddReference(\"RevitServices\") #Dynamo's classes for handling Revit documents\r\nimport RevitServices \r\nfrom RevitServices.Persistence import DocumentManager #An internal Dynamo class\r\n#that keeps track of the document that Dynamo is currently attached to\r\nfrom RevitServices.Transactions import TransactionManager #A Dynamo class for\r\n#opening and closing transactions to change the Revit document's database\r\n\r\nclr.AddReference(\"RevitAPI\") #Adding reference to Revit's API DLLs\r\nclr.AddReference(\"RevitAPIUI\") #Adding reference to Revit's API DLLs\r\n\r\nimport Autodesk #Loads the Autodesk namespace\r\nfrom Autodesk.Revit.DB import * #Loading Revit's API classes\r\nfrom Autodesk.Revit.UI import * #Loading Revit's API UI classes  \r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument #Finally, setting up handles to the active Revit document\r\nuiapp = DocumentManager.Instance.CurrentUIApplication #Setting a handle to the active Revit UI document\r\napp = uiapp.Application  #Setting a handle to the currently-open instance of the Revit application\r\nuidoc = uiapp.ActiveUIDocument #Setting a handle to the currently-open instance of the Revit UI application\r\n\r\n\r\nelements=[UnwrapElement(i) for i in IN[0]]\r\nelement_name=IN[1]\r\nset_name=IN[2]\r\nset_count=IN[3]\r\n\r\nelement_number=[]\r\n#element_name=[]\r\nfor i in element_name:\r\n\tif i in set_name:\r\n\t\tind=set_name.index(i)\r\n\t\telement_number.append(ind)\r\n\t\t\r\nOUT= element_number",
      "VariableInputPorts": true,
      "Id": "53c22661eea54df087b6dbd6f59bbb34",
      "Inputs": [
        {
          "Id": "00f4002edad845dbb28473a697158c2f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ab88451d1dd94aa1bb92543951e2a2c8",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3ae1141cf6fb429494f5dbe74e7728ec",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b70f4d5a339d4b7981ac568267e1841f",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e905256180b14a93acbc726c2733d324",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr #This is .NET's Common Language Runtime. It's an execution environment\r\n#that is able to execute code from several different languages.\r\nimport sys #sys is a fundamental Python library - here, we're using it to load in\r\n#the standard IronPython libraries\r\nsys.path.append('C:\\Program Files (x86)\\IronPython 2.7\\Lib') #Imports the\r\n#standard IronPython libraries, which cover everything from servers and\r\n#encryption through to regular expressions.\r\nimport System #The System namespace at the root of .NET\r\nfrom System import Array #.NET class for handling array information\r\nfrom System.Collections.Generic import * #Lets you handle generics. Revit's API\r\n#sometimes wants hard-typed 'generic' lists, called ILists. If you don't need\r\n#these you can delete this line.\r\nclr.AddReference('ProtoGeometry')  #A Dynamo library for its proxy geometry\r\n#classes. You'll only need this if you're interacting with geometry.\r\nfrom Autodesk.DesignScript.Geometry import * #Loads everything in Dynamo's\r\n#geometry library\r\nclr.AddReference(\"RevitNodes\") #Dynamo's nodes for Revit\r\nimport Revit #Loads in the Revit namespace in RevitNodes\r\nclr.ImportExtensions(Revit.Elements) #More loading of Dynamo's Revit libraries\r\nclr.ImportExtensions(Revit.GeometryConversion) #More loading of Dynamo's\r\n#Revit libraries. You'll only need this if you're interacting with geometry.\r\nclr.AddReference(\"RevitServices\") #Dynamo's classes for handling Revit documents\r\nimport RevitServices \r\nfrom RevitServices.Persistence import DocumentManager #An internal Dynamo class\r\n#that keeps track of the document that Dynamo is currently attached to\r\nfrom RevitServices.Transactions import TransactionManager #A Dynamo class for\r\n#opening and closing transactions to change the Revit document's database\r\n\r\nclr.AddReference(\"RevitAPI\") #Adding reference to Revit's API DLLs\r\nclr.AddReference(\"RevitAPIUI\") #Adding reference to Revit's API DLLs\r\n\r\nimport Autodesk #Loads the Autodesk namespace\r\nfrom Autodesk.Revit.DB import * #Loading Revit's API classes\r\nfrom Autodesk.Revit.UI import * #Loading Revit's API UI classes  \r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument #Finally, setting up handles to the active Revit document\r\nuiapp = DocumentManager.Instance.CurrentUIApplication #Setting a handle to the active Revit UI document\r\napp = uiapp.Application  #Setting a handle to the currently-open instance of the Revit application\r\nuidoc = uiapp.ActiveUIDocument #Setting a handle to the currently-open instance of the Revit UI application\r\n\r\n\r\nind=[]\r\n\r\nfor index, i in enumerate(IN[0]):\r\n\tind.append(index)\r\n\t\r\nOUT= ind",
      "VariableInputPorts": true,
      "Id": "6a74aceeb30a4dd38a7713a2849a1b24",
      "Inputs": [
        {
          "Id": "ddd95c40710b441e83157d1dde5c515f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2388fd3ce116498e97a7043c9d953c17",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Rhythm.Revit.Elements.Elements.SetParameterByNameTypeOrInstance@Revit.Elements.Element,string,var",
      "Id": "de51fd6fa38c4ae3946b17d6570c89fe",
      "Inputs": [
        {
          "Id": "5e242eea73ad45f7bc82f7e47bae681d",
          "Name": "element",
          "Description": "The element to set parameter to.\n\nElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "106b3c6ea13d4f2c9fa4b6cb557b8103",
          "Name": "parameterName",
          "Description": "The parameter name.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b306841f92054d828c3e37e57fb6b7dd",
          "Name": "value",
          "Description": "The value to set.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "024ca652953f44469f15da3b2fc7317b",
          "Name": "element",
          "Description": "The element.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Set one of the element's parameters. Instance if it is instance or type if type.\n\nElements.SetParameterByNameTypeOrInstance (element: Element, parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Description\";",
      "Id": "4a5caa3953c14e518ebb45da2eeeac1b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5ca2737d9fea420eb3a45bf37fac4ad9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Room.Number",
      "Id": "56afc13b9e4d4cca8f488d360799595e",
      "Inputs": [
        {
          "Id": "f9704a29a96c4c0da687ee87b4c13ba5",
          "Name": "room",
          "Description": "Revit.Elements.Room",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a7419287d9af41b19ff97e6d76d2941b",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get room number\n\nRoom.Number: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Geometry",
      "Id": "e9640f73292f4c128a4b2eaa3f215cdb",
      "Inputs": [
        {
          "Id": "c705314a2e19437fbc0ad0923ea7abf9",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "96fe7250156b4b398ac20a26fd6ed450",
          "Name": "var[]",
          "Description": "var[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get all of the Geometry associated with this object\n\nElement.Geometry ( ): var[]"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 303,
      "SelectedString": "OST_Mass",
      "NodeType": "ExtensionNode",
      "Id": "20e1c16807ca484e950d6cee97aac7df",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "05e97cff0f2345e2ac591301c172ef37",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.DirectShape.ByGeometry@Autodesk.DesignScript.Geometry.Geometry,Revit.Elements.Category,Revit.Elements.Material,string",
      "Id": "47558062718646d48b0f9c786e195c91",
      "Inputs": [
        {
          "Id": "630e67075b2d4ac599588e74ded9c547",
          "Name": "geometry",
          "Description": "A Solid or Surface that will be tessellated and placed in the Revit model as a DirectShape\n\nGeometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "993628dd75bf4bd794357336952f864d",
          "Name": "category",
          "Description": "Must be a top level Built-in Category\n\nCategory",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "10ec29b1c24e4f18b31cb14db84162b6",
          "Name": "material",
          "Description": "A Material to apply to the faces of the DirectShape\n\nMaterial\nDefault value : Revit.Elements.DirectShape.DynamoPreviewMaterial",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "61200cd9bb32416eb2f75a6a77aded49",
          "Name": "name",
          "Description": "A string name for the DirectShape\n\nstring\nDefault value : \"DirectShape\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "908f8d109983471a9f7863be06740180",
          "Name": "DirectShape",
          "Description": "A DirectShape Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Revit DirectShape given some geometry, a name for the shape, a Category, and Material. The geometry will be tessellated before being placed in the Revit model The category of a DirectShape cannot be changed after creation, so a new DirectShape will be generated if the category input is changed.\n\nDirectShape.ByGeometry (geometry: Geometry, category: Category, material: Material = Revit.Elements.DirectShape.DynamoPreviewMaterial, name: string = \"DirectShape\"): DirectShape"
    },
    {
      "ConcreteType": "Orchid.E.RevitMaterial.Material, OrchidRE",
      "SelectedIndex": 615,
      "SelectedString": "Glass",
      "NodeType": "ExtensionNode",
      "Id": "5544738875964f47b6c0cc9c2ad068e8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "21ab5d8206b1475197c731ea551c4afd",
          "Name": "Material",
          "Description": "The selected Material",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Dropdown for materials"
    }
  ],
  "Connectors": [
    {
      "Start": "5f789ad5685b4d00bd124c76c3083852",
      "End": "24ca8114bf174028ba6a3c25b25dae91",
      "Id": "fe4137ed41f34266bb519b49cee535d9"
    },
    {
      "Start": "5f789ad5685b4d00bd124c76c3083852",
      "End": "d78e18d9b9a54b4587ac6878f169bfce",
      "Id": "23e3e0b2c2804c6fac29b6448a86e568"
    },
    {
      "Start": "818c59b5c15e46fb91707a0f23f1d55b",
      "End": "6f29aa72f16f465d8977b870ba516740",
      "Id": "bb8c7d832342440895c45d40c0331259"
    },
    {
      "Start": "45d12a175d2c4650964748feffbcc681",
      "End": "7126f9157fb74f16893c118aaeaa984f",
      "Id": "3b5c5aea6a6f45c59362d1d318f79f30"
    },
    {
      "Start": "7e4b5188997c4d01b37f21bcdfbc0fc9",
      "End": "ea0ef62aefb54ecaa1682c1e87ebc96d",
      "Id": "7016329bae604c9da71fbb07b85315ac"
    },
    {
      "Start": "d8e04d30902949c191c3aeecbd599508",
      "End": "5e242eea73ad45f7bc82f7e47bae681d",
      "Id": "c9267d518ce84815bf16aa4842178912"
    },
    {
      "Start": "4ae61f0f2eaf46f2b8460afbcb5d60b0",
      "End": "e4f05b4b6d214d1a8b349d30b96e34f6",
      "Id": "8817485383b9454396138df17e7f2f87"
    },
    {
      "Start": "197c2f8deea5473c8265b7ff352db126",
      "End": "00f4002edad845dbb28473a697158c2f",
      "Id": "7b0e122f8ba54508af08972f26790e58"
    },
    {
      "Start": "197c2f8deea5473c8265b7ff352db126",
      "End": "4609a51bd0fd4179bd7e20fbbc98eeec",
      "Id": "7e4baa63ebc4415496021fc508600d5f"
    },
    {
      "Start": "197c2f8deea5473c8265b7ff352db126",
      "End": "f9704a29a96c4c0da687ee87b4c13ba5",
      "Id": "26e802b41fc848a9983efddaa78df35e"
    },
    {
      "Start": "197c2f8deea5473c8265b7ff352db126",
      "End": "c705314a2e19437fbc0ad0923ea7abf9",
      "Id": "91d6b31b3c044b8183703f47c1e554a2"
    },
    {
      "Start": "522e1bfb146341ecbe5d2dc2423fc28d",
      "End": "cb5e7190bf944e069373730365a1d04a",
      "Id": "9a282c7557f4455bb3d12620a11bccb7"
    },
    {
      "Start": "65e227d8d9d34ad38828b82db31a914a",
      "End": "bcf95daa578341c89a83a93554fc5e5a",
      "Id": "cb6b462c00294018bd31eaa51f67e8f5"
    },
    {
      "Start": "66d70b100e8c4f7e96a71c04490ad075",
      "End": "b2ea462c1a0045bf9146d46f4b8e1f8b",
      "Id": "e330ac1e2ed7463bb65f7a14eaf02196"
    },
    {
      "Start": "23a222cc421b4b6f811dea0e830d4b28",
      "End": "7de5b06ccbf046eabdf2d48e8b747c9d",
      "Id": "722c2ce35a484c19a34d34491141b3a5"
    },
    {
      "Start": "23a222cc421b4b6f811dea0e830d4b28",
      "End": "af61057c27c64fe586cb167bfba9f993",
      "Id": "50286239538743589e4809327afcce6d"
    },
    {
      "Start": "23a222cc421b4b6f811dea0e830d4b28",
      "End": "1a4c04263e9c4494a4b4d03787809b81",
      "Id": "46b27857f3be4e47bd3775a3f2da22dd"
    },
    {
      "Start": "23a222cc421b4b6f811dea0e830d4b28",
      "End": "ff681f600b3e47ff936bcbc94ec53353",
      "Id": "605199a3f52645e19ca9ec58e57b9464"
    },
    {
      "Start": "23a222cc421b4b6f811dea0e830d4b28",
      "End": "177195ecf94542f8b8daf5d4e20c1de4",
      "Id": "5d4ed1631295429fbd07cc68dc0ee112"
    },
    {
      "Start": "23a222cc421b4b6f811dea0e830d4b28",
      "End": "159bd47d0c75467dba3fd569517c90c1",
      "Id": "c5246cc4df8c4e389b4716fc6fb19945"
    },
    {
      "Start": "23a222cc421b4b6f811dea0e830d4b28",
      "End": "45ca8e66f8a84d6cbacd8e1cd93e4e3e",
      "Id": "e4a410d538fc4adbb645d22a8275fadf"
    },
    {
      "Start": "6bd24e064da54807a9176ab718fb5e16",
      "End": "f9d3818a87a84ea3873e27585f1c5e2e",
      "Id": "a391bbce0a764796a9c00fdb6ea5924d"
    },
    {
      "Start": "6bd24e064da54807a9176ab718fb5e16",
      "End": "54d09ce6e24c4c8286e8c13b5a93e103",
      "Id": "a976fcc2e4fc485bb2840f18d4836253"
    },
    {
      "Start": "3dc0399c5e5f4685b59689b51078f21a",
      "End": "ec7a6b26fdc6419b9eae99fbbac8954b",
      "Id": "0c23f85a5f864d269ddfe12bdf8d2b73"
    },
    {
      "Start": "0ae9a15b0417460d9d04511c0e4f693f",
      "End": "4b0aa79df8b843b39cc0bb19bf1be40c",
      "Id": "ccc6ab80f9334a7282f063f20a0e574c"
    },
    {
      "Start": "a9b781a152214496a79d7bebeb07e409",
      "End": "be7d5747ba3c4ff2bdc44f8783c372dc",
      "Id": "f43c96a4e118448e8cad16e9cb7c22a5"
    },
    {
      "Start": "a9bf4432f02c4e7c8209ff599480fbb3",
      "End": "65e363e7ab2248ed9d312aa69eb357d0",
      "Id": "96b963c4cfe14232a2945bc450f29f3d"
    },
    {
      "Start": "b30951a0d3104634882c217277e1e7c3",
      "End": "d5076fc68eaf48eaaefabb1f3c46a4d1",
      "Id": "93d11b666fc04ecb9b95d323c069ce89"
    },
    {
      "Start": "2a40abc1ab364c3b867a9df371333ea2",
      "End": "3ae1141cf6fb429494f5dbe74e7728ec",
      "Id": "f7f1c4cf5ae546c5901c013cd4a02eb5"
    },
    {
      "Start": "2a40abc1ab364c3b867a9df371333ea2",
      "End": "ddd95c40710b441e83157d1dde5c515f",
      "Id": "76a7d02e6af94a32b0bdee593dcf4ecb"
    },
    {
      "Start": "0625992aaa1e4dc5b3c1079ab678ffc9",
      "End": "53192f38c3aa434cae2b266ac037419b",
      "Id": "4010ea194b6b40bb96fe3132fa6a24a7"
    },
    {
      "Start": "0625992aaa1e4dc5b3c1079ab678ffc9",
      "End": "ab88451d1dd94aa1bb92543951e2a2c8",
      "Id": "8a515fcadb4d4783a25529b2dbd9a8fe"
    },
    {
      "Start": "0625992aaa1e4dc5b3c1079ab678ffc9",
      "End": "b306841f92054d828c3e37e57fb6b7dd",
      "Id": "cfab367cc26d4481b79be56a200e0a72"
    },
    {
      "Start": "e905256180b14a93acbc726c2733d324",
      "End": "8c8e29df6f6a4e38abe4f303942893b6",
      "Id": "e70ec1865f2a4e8baf4a466a09d3c5c5"
    },
    {
      "Start": "2388fd3ce116498e97a7043c9d953c17",
      "End": "b70f4d5a339d4b7981ac568267e1841f",
      "Id": "f289bff4717b4f63872af3b63c28adbf"
    },
    {
      "Start": "5ca2737d9fea420eb3a45bf37fac4ad9",
      "End": "106b3c6ea13d4f2c9fa4b6cb557b8103",
      "Id": "fd1bba8790e948d1b43f4247a4bc9511"
    },
    {
      "Start": "a7419287d9af41b19ff97e6d76d2941b",
      "End": "61200cd9bb32416eb2f75a6a77aded49",
      "Id": "a0ba5da7d5994c47877dd6a4c6e54d89"
    },
    {
      "Start": "96fe7250156b4b398ac20a26fd6ed450",
      "End": "6c0cfd3243234666874db2f15238e464",
      "Id": "224445c084874ee28c3487ea2c2f9668"
    },
    {
      "Start": "96fe7250156b4b398ac20a26fd6ed450",
      "End": "630e67075b2d4ac599588e74ded9c547",
      "Id": "4213e5b4a84e49f889d1a2dfa02d8170"
    },
    {
      "Start": "05e97cff0f2345e2ac591301c172ef37",
      "End": "993628dd75bf4bd794357336952f864d",
      "Id": "a857ced09fff4c509ed8e915c939901e"
    },
    {
      "Start": "908f8d109983471a9f7863be06740180",
      "End": "99e81be1214f4ad380f1755ed2c555f3",
      "Id": "b02e852db8674882bd35691aa3d82c24"
    },
    {
      "Start": "21ab5d8206b1475197c731ea551c4afd",
      "End": "10ec29b1c24e4f18b31cb14db84162b6",
      "Id": "8b871591c3474fc2936e89c0eb5c8321"
    }
  ],
  "Dependencies": [
    "9266cc47-e982-46fc-9fd4-59bd7fb19a53"
  ],
  "NodeLibraryDependencies": [
    {
      "Name": "Clockwork for Dynamo 2.x",
      "Version": "2.3.0",
      "ReferenceType": "Package",
      "Nodes": [
        "20b1955f2023439b86ccd9942908601f"
      ]
    },
    {
      "Name": "Rhythm",
      "Version": "2021.4.2",
      "ReferenceType": "Package",
      "Nodes": [
        "de51fd6fa38c4ae3946b17d6570c89fe"
      ]
    },
    {
      "Name": "Orchid",
      "Version": "206.3.0.7800",
      "ReferenceType": "Package",
      "Nodes": [
        "5544738875964f47b6c0cc9c2ad068e8"
      ]
    }
  ],
  "Bindings": [
    {
      "NodeId": "47558062-7186-46d4-8b0f-9c786e195c91",
      "Binding": {
        "ByGeometry_InClassDecl-1_InFunctionScope-1_Instance0_47558062-7186-46d4-8b0f-9c786e195c91": ""
      }
    }
  ],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.6.1.8786",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -256695.52494303923,
      "EyeY": 219463.34470970798,
      "EyeZ": -1200552.4367886854,
      "LookX": 302931.60170473956,
      "LookY": -210134.29545796977,
      "LookZ": 1106524.7516626902,
      "UpX": -0.00921528232885526,
      "UpY": 0.99939082701909865,
      "UpZ": -0.03366085919413575
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Color Range",
        "Id": "f8a274d9316e4b5fa80a717846eb6868",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 624.607911326135,
        "Y": 1021.72102534076
      },
      {
        "ShowGeometry": true,
        "Name": "Math.RemapRange",
        "Id": "b0d02ea21d6e4e8f9d21e95603684728",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 234.521427084865,
        "Y": 1150.70290204918
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "6633c25d30a646999f83e392f13a8be2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 54.5649393033532,
        "Y": 1248.4038305729
      },
      {
        "ShowGeometry": true,
        "Name": "GeometryColor.ByGeometryColor",
        "Id": "facde8e7acda42d2ab80e1bb0de80e37",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1143.1421541371662,
        "Y": 49.460093699804474
      },
      {
        "ShowGeometry": true,
        "Name": "Element.OverrideColorInView",
        "Id": "7f95d9b972bb4e84a649a79e8e015689",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1651.2796497467959,
        "Y": 96.894164828467581
      },
      {
        "ShowGeometry": true,
        "Name": "Categories",
        "Id": "be7a43dd606e4f59b41346c60759b685",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2155.738881075782,
        "Y": 345.04444202326994
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Category",
        "Id": "1ed6741a462e457bac9a441ee2c33a6f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1923.860559139632,
        "Y": 343.69231933548531
      },
      {
        "ShowGeometry": true,
        "Name": "Color.ByARGB",
        "Id": "335d88fd9e204676854a110f64cef6f9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -286.31928170704396,
        "Y": 572.29381119923153
      },
      {
        "ShowGeometry": true,
        "Name": "Color.ByARGB",
        "Id": "84b0a7b7aaa04e7c82919cf6341b8a5b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -287.11439567734737,
        "Y": 405.05824869953142
      },
      {
        "ShowGeometry": true,
        "Name": "Color.ByARGB",
        "Id": "9e13d6830b7b4521a4fbe58d296451cb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -284.98143611851128,
        "Y": 734.46009061078462
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "988920b7abeb47f796204a232dd4178d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -566.66428980590308,
        "Y": 558.06809890585487
      },
      {
        "ShowGeometry": true,
        "Name": "List Create",
        "Id": "f2a819ecbfbc4c6a8c19add8b4746bbc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4.6543495383946265,
        "Y": 549.97030265990054
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "05f95cb8642d482ab1c76807bafaeeb1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -128.10882421694652,
        "Y": 783.82787600962934
      },
      {
        "ShowGeometry": true,
        "Name": "List Create",
        "Id": "fa67aa6d7b904170883ae8e1ce3386df",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5.3191759433944981,
        "Y": 717.43844153590067
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "f1f7d424fd0643578bd86a84bf15280a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -583.970595874537,
        "Y": 1231.41858063097
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Name+",
        "Id": "20b1955f2023439b86ccd9942908601f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -853.002372844715,
        "Y": 1112.32329144283
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "53c22661eea54df087b6dbd6f59bbb34",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 15.99319191879,
        "Y": 1093.14263052532
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "6a74aceeb30a4dd38a7713a2849a1b24",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -292.029572998605,
        "Y": 1317.90084501792
      },
      {
        "ShowGeometry": true,
        "Name": "ʳʰʸᵗʰᵐ|Elements.SetParameterByNameTypeOrInstance",
        "Id": "de51fd6fa38c4ae3946b17d6570c89fe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2027.8933194563242,
        "Y": 186.33557047094141
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "4a5caa3953c14e518ebb45da2eeeac1b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1700.77401624558,
        "Y": 213.474185305869
      },
      {
        "ShowGeometry": true,
        "Name": "Room.Number",
        "Id": "56afc13b9e4d4cca8f488d360799595e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -774.624808117379,
        "Y": 249.212184014794
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Geometry",
        "Id": "e9640f73292f4c128a4b2eaa3f215cdb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -782.789632605235,
        "Y": 75.5421162851634
      },
      {
        "ShowGeometry": true,
        "Name": "Categories",
        "Id": "20e1c16807ca484e950d6cee97aac7df",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -754.105885012644,
        "Y": 162.433978673649
      },
      {
        "ShowGeometry": true,
        "Name": "DirectShape.ByGeometry",
        "Id": "47558062718646d48b0f9c786e195c91",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -125.113084775513,
        "Y": 89.1495063408747
      },
      {
        "ShowGeometry": true,
        "Name": "Materials",
        "Id": "5544738875964f47b6c0cc9c2ad068e8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -502.300455803447,
        "Y": 266.05972816533347
      }
    ],
    "Annotations": [
      {
        "Id": "0b224ab38cca425286e82a8bc22e6241",
        "Title": "Color set",
        "Nodes": [
          "335d88fd9e204676854a110f64cef6f9",
          "84b0a7b7aaa04e7c82919cf6341b8a5b",
          "9e13d6830b7b4521a4fbe58d296451cb",
          "988920b7abeb47f796204a232dd4178d",
          "f2a819ecbfbc4c6a8c19add8b4746bbc",
          "05f95cb8642d482ab1c76807bafaeeb1",
          "fa67aa6d7b904170883ae8e1ce3386df"
        ],
        "Left": -576.66428980590308,
        "Top": 352.05824869953142,
        "Width": 711.98346574929758,
        "Height": 552.76962731009792,
        "FontSize": 36.0,
        "InitialTop": 405.05824869953142,
        "InitialHeight": 523.76962731009792,
        "TextblockHeight": 43.0,
        "Background": "#FFD4B6DB"
      },
      {
        "Id": "9c51a0644ac04add9b206a0f53a069a0",
        "Title": "Counting unique items based on name and associating them with total names",
        "Nodes": [
          "f1f7d424fd0643578bd86a84bf15280a",
          "20b1955f2023439b86ccd9942908601f",
          "53c22661eea54df087b6dbd6f59bbb34",
          "6a74aceeb30a4dd38a7713a2849a1b24",
          "b0d02ea21d6e4e8f9d21e95603684728",
          "f8a274d9316e4b5fa80a717846eb6868",
          "6633c25d30a646999f83e392f13a8be2"
        ],
        "Left": -863.002372844715,
        "Top": 968.72102534076,
        "Width": 1793.6102841708498,
        "Height": 442.17981967715991,
        "FontSize": 36.0,
        "InitialTop": 1021.72102534076,
        "InitialHeight": 441.17981967715991,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "e4b6619322664736b53fcb382b20380a",
        "Title": "Creating Mass",
        "Nodes": [
          "47558062718646d48b0f9c786e195c91",
          "20e1c16807ca484e950d6cee97aac7df",
          "e9640f73292f4c128a4b2eaa3f215cdb",
          "56afc13b9e4d4cca8f488d360799595e"
        ],
        "Left": -792.789632605235,
        "Top": 22.542116285163402,
        "Width": 928.676547829722,
        "Height": 319.6700677296306,
        "FontSize": 36.0,
        "InitialTop": 75.5421162851634,
        "InitialHeight": 318.6700677296306,
        "TextblockHeight": 43.0,
        "Background": "#FFFFAA45"
      }
    ],
    "X": 551.77669602029187,
    "Y": 362.55470536884479,
    "Zoom": 0.18496119669778155
  }
}