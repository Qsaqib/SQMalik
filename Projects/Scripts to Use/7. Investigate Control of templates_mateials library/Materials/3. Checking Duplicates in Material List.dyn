{
  "Uuid": "be710368-795e-4932-a497-6f55531ca295",
  "IsCustomNode": false,
  "Description": null,
  "Name": "extracting original material",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 323,
      "SelectedString": "OST_Materials",
      "NodeType": "ExtensionNode",
      "Id": "9f140b59da0e49ccbf0e6ed975a0959f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "95dbd86df1e74e34bcc2e62c3ec04c62",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "71226b7374984110b464c7838d76ef11",
      "Inputs": [
        {
          "Id": "3a77053a60f648d1814cf102a5a47237",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c51deec5d9884b3d8488092c95c5d09c",
          "Name": "Elements",
          "Description": "An element type.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Name",
      "Id": "d74e2d16606a47b9956dd8ffdb8d32c0",
      "Inputs": [
        {
          "Id": "acadadf86a8849ff8c61e4daea3e0dcd",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9f3a9e05b23f46499b8ed6c5d515b54b",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Name of the Element\n\nElement.Name: string"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr #This is .NET's Common Language Runtime. It's an execution environment\r\n#that is able to execute code from several different languages.\r\nimport sys #sys is a fundamental Python library - here, we're using it to load in\r\n#the standard IronPython libraries\r\nsys.path.append('C:\\Program Files (x86)\\IronPython 2.7\\Lib') #Imports the\r\n#standard IronPython libraries, which cover everything from servers and\r\n#encryption through to regular expressions.\r\nimport System #The System namespace at the root of .NET\r\nfrom System import Array #.NET class for handling array information\r\nfrom System.Collections.Generic import * #Lets you handle generics. Revit's API\r\n#sometimes wants hard-typed 'generic' lists, called ILists. If you don't need\r\n#these you can delete this line.\r\nclr.AddReference('ProtoGeometry')  #A Dynamo library for its proxy geometry\r\n#classes. You'll only need this if you're interacting with geometry.\r\nfrom Autodesk.DesignScript.Geometry import * #Loads everything in Dynamo's\r\n#geometry library\r\nclr.AddReference(\"RevitNodes\") #Dynamo's nodes for Revit\r\nimport Revit #Loads in the Revit namespace in RevitNodes\r\nclr.ImportExtensions(Revit.Elements) #More loading of Dynamo's Revit libraries\r\nclr.ImportExtensions(Revit.GeometryConversion) #More loading of Dynamo's\r\n#Revit libraries. You'll only need this if you're interacting with geometry.\r\nclr.AddReference(\"RevitServices\") #Dynamo's classes for handling Revit documents\r\nimport RevitServices \r\nfrom RevitServices.Persistence import DocumentManager #An internal Dynamo class\r\n#that keeps track of the document that Dynamo is currently attached to\r\nfrom RevitServices.Transactions import TransactionManager #A Dynamo class for\r\n#opening and closing transactions to change the Revit document's database\r\n\r\nclr.AddReference(\"RevitAPI\") #Adding reference to Revit's API DLLs\r\nclr.AddReference(\"RevitAPIUI\") #Adding reference to Revit's API DLLs\r\n\r\nimport Autodesk #Loads the Autodesk namespace\r\nfrom Autodesk.Revit.DB import * #Loading Revit's API classes\r\nfrom Autodesk.Revit.UI import * #Loading Revit's API UI classes  \r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument #Finally, setting up handles to the active Revit document\r\nuiapp = DocumentManager.Instance.CurrentUIApplication #Setting a handle to the active Revit UI document\r\napp = uiapp.Application  #Setting a handle to the currently-open instance of the Revit application\r\nuidoc = uiapp.ActiveUIDocument #Setting a handle to the currently-open instance of the Revit UI application\r\n\r\n#######OK NOW YOU CAN CODE########\r\nimport re\r\n\r\nmaterial_name=IN[0]\r\nwrapped_material_elements=IN[1]\r\n\r\nmaterials_original=[]\r\nmaterials_copy=[]\r\nmaterial_elements=[]\r\nfor material in wrapped_material_elements:\r\n\tmat=UnwrapElement(material)\r\n\tmaterial_elements.append(mat)\r\n\t\r\n\r\nfor name in material_name:\r\n\tname1=name.lower()\r\n\tif name1.find(\"copy\")!=-1:\r\n\t\tmaterials_copy.append(name)\r\n\telif name1.find(\"(1)\")!=-1:\r\n\t\tmaterials_copy.append(name)\r\n\telif name1.find(\"(2)\")!=-1:\r\n\t\tmaterials_copy.append(name)\r\n\telif name1.find(\"(3)\")!=-1:\r\n\t\tmaterials_copy.append(name)\r\n\telif name1.find(\"(4)\")!=-1:\r\n\t\tmaterials_copy.append(name)\r\n\telif name1.find(\"(5)\")!=-1:\r\n\t\tmaterials_copy.append(name)\r\n\telif name1.find(\"(6)\")!=-1:\r\n\t\tmaterials_copy.append(name)\r\n\telif name1.find(\"(7)\")!=-1:\r\n\t\tmaterials_copy.append(name)\r\n\telif name1.find(\"(8)\")!=-1:\r\n\t\tmaterials_copy.append(name)\r\n\telif name1.find(\"(9)\")!=-1:\r\n\t\tmaterials_copy.append(name)\r\n\telse:\r\n\t\tmaterials_original.append(name)\r\n\r\nmaterials_orig_name=[]\r\n\r\nfor i in materials_original:\r\n\tfor j in materials_copy:\r\n\t\tif j.find(i)!=-1:\r\n\t\t\tmaterials_orig_name.append(i)\r\n\r\nmaterials_orig_elem=[]\r\nfor elem in material_elements:\r\n\telm=elem.Name\r\n\tif elm in materials_orig_name:\r\n\t\tmaterials_orig_elem.append(elem)\r\n# original content\r\n\r\n\r\n# duplicate content\r\n\r\nmaterials_duplicate_name=[]\r\nmaterials_duplicate_elements=[]\r\nfor element in material_elements:\r\n\telm=element.Name\t\r\n\tif elm in materials_copy:\r\n\t\tmaterials_duplicate_elements.append(element)\r\n\t\tmaterials_duplicate_name.append(elm)\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n#for e in materials_duplicate_elements:\r\n#\tdoc.Delete(e.Id)\r\n\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n\r\nOUT=materials_orig_name, materials_duplicate_name, materials_orig_elem, materials_duplicate_elements",
      "VariableInputPorts": true,
      "Id": "15bf36a8ce674a76aa4a467055fdd19e",
      "Inputs": [
        {
          "Id": "512fc2bc13c14f4ab587e1e0709ca753",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "97b9e6f104194554b06465568c5cd8a7",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0f1b770dd5214aaab4d77fa895330933",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "material_original_name=mat[0];\nmaterial_duplicate_name=mat[1];\nmaterial_original_elem=mat[2];\nmaterial_duplicate_elem=mat[3];",
      "Id": "c0de689382614fb48fd5195f2546386b",
      "Inputs": [
        {
          "Id": "e52c1b82cbac4d4c9a442ffd4da5f5d6",
          "Name": "mat",
          "Description": "mat",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ee8bf410e5c641a0b02fcc7c2e74ee97",
          "Name": "",
          "Description": "material_original_name",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d1495976f601415399336a3f13808721",
          "Name": "",
          "Description": "material_duplicate_name",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a13e4012f56e41e9be13c664771ff030",
          "Name": "",
          "Description": "material_original_elem",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f8607fd903d046979e462329ad9eb0e1",
          "Name": "",
          "Description": "material_duplicate_elem",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr #This is .NET's Common Language Runtime. It's an execution environment\r\n#that is able to execute code from several different languages.\r\nimport sys #sys is a fundamental Python library - here, we're using it to load in\r\n#the standard IronPython libraries\r\nsys.path.append('C:\\Program Files (x86)\\IronPython 2.7\\Lib') #Imports the\r\n#standard IronPython libraries, which cover everything from servers and\r\n#encryption through to regular expressions.\r\nimport System #The System namespace at the root of .NET\r\nfrom System import Array #.NET class for handling array information\r\nfrom System.Collections.Generic import * #Lets you handle generics. Revit's API\r\n#sometimes wants hard-typed 'generic' lists, called ILists. If you don't need\r\n#these you can delete this line.\r\nclr.AddReference('ProtoGeometry')  #A Dynamo library for its proxy geometry\r\n#classes. You'll only need this if you're interacting with geometry.\r\nfrom Autodesk.DesignScript.Geometry import * #Loads everything in Dynamo's\r\n#geometry library\r\nclr.AddReference(\"RevitNodes\") #Dynamo's nodes for Revit\r\nimport Revit #Loads in the Revit namespace in RevitNodes\r\nclr.ImportExtensions(Revit.Elements) #More loading of Dynamo's Revit libraries\r\nclr.ImportExtensions(Revit.GeometryConversion) #More loading of Dynamo's\r\n#Revit libraries. You'll only need this if you're interacting with geometry.\r\nclr.AddReference(\"RevitServices\") #Dynamo's classes for handling Revit documents\r\nimport RevitServices \r\nfrom RevitServices.Persistence import DocumentManager #An internal Dynamo class\r\n#that keeps track of the document that Dynamo is currently attached to\r\nfrom RevitServices.Transactions import TransactionManager #A Dynamo class for\r\n#opening and closing transactions to change the Revit document's database\r\n\r\nclr.AddReference(\"RevitAPI\") #Adding reference to Revit's API DLLs\r\nclr.AddReference(\"RevitAPIUI\") #Adding reference to Revit's API DLLs\r\n\r\nimport Autodesk #Loads the Autodesk namespace\r\nfrom Autodesk.Revit.DB import * #Loading Revit's API classes\r\nfrom Autodesk.Revit.UI import * #Loading Revit's API UI classes\r\n\r\n\r\nclr.AddReference('DSCoreNodes')\r\nimport DSCore\r\nfrom DSCore import Color\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument #Finally, setting up handles to the active Revit document\r\nuiapp = DocumentManager.Instance.CurrentUIApplication #Setting a handle to the active Revit UI document\r\napp = uiapp.Application  #Setting a handle to the currently-open instance of the Revit application\r\nuidoc = uiapp.ActiveUIDocument #Setting a handle to the currently-open instance of the Revit UI application\r\n\r\n#######OK NOW YOU CAN CODE########\r\n\r\n\r\nmaterial_original_elem=IN[2]\r\nmaterial_duplicate_elem=IN[3]\r\n\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\nduplicates=[]\r\nnew_type=[]\r\n\r\nmaterials_orig=[]\r\nmaterials_dup=[]\r\n\r\nfor material in material_original_elem:\r\n\tmaterials_orig.append(UnwrapElement(material))\r\n\r\nfor material in material_duplicate_elem:\r\n\tmaterials_dup.append(UnwrapElement(material))\r\n\t\r\ncolornameo,sforpatternlisto,sbacpatternlisto,cforpatternlisto,cbacpatternlisto,transparencylisto,rgbListo,rgbSurforListo,rgbSurbacListo,rgbCutforListo,rgbCutbacListo=[],[],[],[],[],[],[],[],[],[],[]\r\ncolornamed,sforpatternlistd,sbacpatternlistd,cforpatternlistd,cbacpatternlistd,transparencylistd,rgbListd,rgbSurforListd,rgbSurbacListd,rgbCutforListd,rgbCutbacListd=[],[],[],[],[],[],[],[],[],[],[]\r\n\r\n\r\nmato=[]\r\n\r\nfor mateo in materials_orig:\r\n\tnamo=mateo.Name\r\n\tfor mated in materials_dup:\r\n\t\tnamd=mated.Name\r\n\t\tif namd.find(namo)!=-1: \r\n\t\t\tmato.append(mateo)\r\n\t\t\r\nfor materialo, materiald in zip(mato, materials_dup) :\r\n\tcolornameo.append(materialo.Name)\r\n\tcolornamed.append(materiald.Name)\r\n\t\r\n\tif materialo.Color.IsValid:\r\n\t\tcolor=materialo.Color\r\n\t\trgbo = DSCore.Color.ByARGB(255, color.Red, color.Green, color.Blue)\r\n\telse:\r\n\t\trgbo = None\r\n\trgbListo.append(rgbo)\t\r\n\tif materiald.Color.IsValid:\r\n\t\tcolor=materiald.Color\r\n\t\trgbd = DSCore.Color.ByARGB(255, color.Red, color.Green, color.Blue)\r\n\telse:\r\n\t\trgbd = None\r\n\t\r\n\t\r\n\trgbListd.append(rgbd)\r\n\t\r\n\ttransparencylisto.append(materialo.Transparency)\r\n\ttransparencylistd.append(materiald.Transparency)\t\r\n\t\r\n\r\n################Originals##########################\r\n\r\n\r\n\tsforpatternlisto.append(doc.GetElement(materialo.SurfaceForegroundPatternId))\r\n\tsurcoloro = materialo.SurfaceForegroundPatternColor\r\n\trgbSfo = DSCore.Color.ByARGB(255, surcoloro.Red, surcoloro.Green, surcoloro.Blue)\r\n\trgbSurforListo.Add(rgbSfo)\r\n\r\n\tsbacpatternlisto.append(doc.GetElement(materialo.SurfaceBackgroundPatternId))\r\n\tsurbaccoloro=materialo.SurfaceBackgroundPatternColor\r\n\trgbSbo = DSCore.Color.ByARGB(255, surbaccoloro.Red, surbaccoloro.Green, surbaccoloro.Blue)\r\n\trgbSurbacListo.Add(rgbSbo)\t\r\n\r\n\tcforpatternlisto.append(doc.GetElement(materialo.CutForegroundPatternId))\r\n\tcutcoloro=materialo.CutForegroundPatternColor\r\n\trgbCfo = DSCore.Color.ByARGB(255, cutcoloro.Red, cutcoloro.Green, cutcoloro.Blue)\r\n\trgbCutforListo.Add(rgbCfo)\r\n\r\n\tcbacpatternlisto.append(doc.GetElement(materialo.CutBackgroundPatternId))\r\n\tcutbaccoloro = materialo.CutBackgroundPatternColor\r\n\trgbCbo = DSCore.Color.ByARGB(255, cutbaccoloro.Red, cutbaccoloro.Green, cutbaccoloro.Blue)\r\n\trgbCutbacListo.Add(rgbCbo)\r\n\t\r\n\t########Duplicates#####################\r\n\t\r\n\t\r\n\tsforpatternlistd.append(doc.GetElement(materiald.SurfaceForegroundPatternId))\r\n\tsurcolord = materiald.SurfaceForegroundPatternColor\r\n\trgbSfd = DSCore.Color.ByARGB(255, surcolord.Red, surcolord.Green, surcolord.Blue)\r\n\trgbSurforListd.Add(rgbSfd)\r\n\r\n\tsbacpatternlistd.append(doc.GetElement(materiald.SurfaceBackgroundPatternId))\r\n\tsurbaccolord=materiald.SurfaceBackgroundPatternColor\r\n\trgbSbd = DSCore.Color.ByARGB(255, surbaccolord.Red, surbaccolord.Green, surbaccolord.Blue)\r\n\trgbSurbacListd.Add(rgbSbd)\t\r\n\r\n\tcforpatternlistd.append(doc.GetElement(materiald.CutForegroundPatternId))\r\n\tcutcolord=materiald.CutForegroundPatternColor\r\n\trgbCfd = DSCore.Color.ByARGB(255, cutcolord.Red, cutcolord.Green, cutcolord.Blue)\r\n\trgbCutforListd.Add(rgbCfd)\r\n\r\n\tcbacpatternlistd.append(doc.GetElement(materiald.CutBackgroundPatternId))\r\n\tcutbaccolord = materiald.CutBackgroundPatternColor\r\n\trgbCbd = DSCore.Color.ByARGB(255, cutbaccolord.Red, cutbaccolord.Green, cutbaccolord.Blue)\r\n\trgbCutbacListd.Add(rgbCbd)\r\n\t\r\n\r\n\tif  rgbListo==rgbListd and sforpatternlisto==sforpatternlistd and rgbSurforListo==rgbSurforListd and sbackpatternlisto==sbackpatternlistd and rgbSurbacListo==rgbSurbacListd and cforpatternlisto==cforpatternlistd and rgbCutforListo==rgbCutforListd and cbacpatternlisto==cbacpatternlistd and rgbCutbacListo==rgbCutbacListd and transparencylisto==transaparencylist:\r\n\t\tduplicates.append(materiald)\r\n\telse:\r\n\t\tnew_type.append(materiald)\r\n\r\nfor e in duplicates:\r\n\tdoc.Delete(e.Id)\r\n\r\n\r\nOUT = duplicates, new_type,sforpatternlisto, sforpatternlistd,sbacpatternlisto,sbacpatternlistd, cforpatternlisto,cforpatternlistd, cbacpatternlisto, cbacpatternlistd, transparencylisto, transparencylistd, rgbListo, rgbListd, rgbSurforListo, rgbSurforListd, rgbSurbacListo, rgbSurbacListd, rgbCutforListo,rgbCutforListd, rgbCutbacListo, rgbCutbacListd\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "fab0d58f2d1f4bc3abc64c1806ab7562",
      "Inputs": [
        {
          "Id": "abfe4c625cd94249bc3575c5288301ba",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d2bdcea7e17b450b84336ab32ede8d56",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "683e9484de6549bea39cc980cf46560a",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "83fac7ed9a724d1d9932279b689f687e",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5614b5b0527f4d51bf056b69e586569d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "e2956853b46b46b5b3cc4aa1bda229fe",
      "Inputs": [
        {
          "Id": "c57ae718ac1348228592d4e43f08db15",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9446cb0a5db3446a95cb1f6b32f9f5d3",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    }
  ],
  "Connectors": [
    {
      "Start": "95dbd86df1e74e34bcc2e62c3ec04c62",
      "End": "3a77053a60f648d1814cf102a5a47237",
      "Id": "af4cb14ec41948f0a7b1bd8fc0f93d78"
    },
    {
      "Start": "c51deec5d9884b3d8488092c95c5d09c",
      "End": "acadadf86a8849ff8c61e4daea3e0dcd",
      "Id": "1dcf064311954f02825798cbe8f51aca"
    },
    {
      "Start": "c51deec5d9884b3d8488092c95c5d09c",
      "End": "97b9e6f104194554b06465568c5cd8a7",
      "Id": "0ab4febafc564bad87b6eabff06bcc54"
    },
    {
      "Start": "9f3a9e05b23f46499b8ed6c5d515b54b",
      "End": "512fc2bc13c14f4ab587e1e0709ca753",
      "Id": "5729cfafa3274a1fbfadd80b9edf3ce8"
    },
    {
      "Start": "0f1b770dd5214aaab4d77fa895330933",
      "End": "e52c1b82cbac4d4c9a442ffd4da5f5d6",
      "Id": "f863ad236517479281b311ae2b2d409d"
    },
    {
      "Start": "ee8bf410e5c641a0b02fcc7c2e74ee97",
      "End": "abfe4c625cd94249bc3575c5288301ba",
      "Id": "80794a963a6a45b1981ee9d31d74da05"
    },
    {
      "Start": "d1495976f601415399336a3f13808721",
      "End": "d2bdcea7e17b450b84336ab32ede8d56",
      "Id": "4bd69473a2dd4d50aa515e94cb7b9b20"
    },
    {
      "Start": "a13e4012f56e41e9be13c664771ff030",
      "End": "683e9484de6549bea39cc980cf46560a",
      "Id": "700b526aab7a44d8b9775b698d874156"
    },
    {
      "Start": "f8607fd903d046979e462329ad9eb0e1",
      "End": "83fac7ed9a724d1d9932279b689f687e",
      "Id": "316cf7bf58b34314b618593e2e2a7c78"
    },
    {
      "Start": "5614b5b0527f4d51bf056b69e586569d",
      "End": "c57ae718ac1348228592d4e43f08db15",
      "Id": "16d0f1e32615449db2a22132bd970bba"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.6.1.8786",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Categories",
        "Id": "9f140b59da0e49ccbf0e6ed975a0959f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 308.12136448988281,
        "Y": 192.250149523607
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Category",
        "Id": "71226b7374984110b464c7838d76ef11",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 562.44213088533775,
        "Y": 192.55727102023448
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Name",
        "Id": "d74e2d16606a47b9956dd8ffdb8d32c0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 854.39999999999986,
        "Y": 88.800000000000153
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "15bf36a8ce674a76aa4a467055fdd19e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1169.6829864911201,
        "Y": 168.22582612818974
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "c0de689382614fb48fd5195f2546386b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1396.416420018413,
        "Y": 175.63757568329959
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "fab0d58f2d1f4bc3abc64c1806ab7562",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1837.7446974748127,
        "Y": 159.00970184398176
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "e2956853b46b46b5b3cc4aa1bda229fe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2166.9469202724322,
        "Y": 163.4788334007074
      }
    ],
    "Annotations": [
      {
        "Id": "2c0ea0adfff24c3ebbd354ec120d9242",
        "Title": "Sorting elements based on their names",
        "Nodes": [
          "9f140b59da0e49ccbf0e6ed975a0959f",
          "71226b7374984110b464c7838d76ef11",
          "d74e2d16606a47b9956dd8ffdb8d32c0",
          "15bf36a8ce674a76aa4a467055fdd19e"
        ],
        "Left": 298.12136448988281,
        "Top": 35.800000000000153,
        "Width": 1005.5616220012373,
        "Height": 249.75727102023433,
        "FontSize": 36.0,
        "InitialTop": 88.800000000000153,
        "InitialHeight": 248.75727102023433,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "bfeecf32fef14a0abcd735c2cf47708d",
        "Title": "Sorting elements based on their property",
        "Nodes": [
          "fab0d58f2d1f4bc3abc64c1806ab7562"
        ],
        "Left": 1827.7446974748127,
        "Top": 5.0097018439817589,
        "Width": 144.0,
        "Height": 325.0,
        "FontSize": 24.0,
        "InitialTop": 159.00970184398176,
        "InitialHeight": 145.0,
        "TextblockHeight": 144.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": -127.100200022134,
    "Y": 309.57355347015852,
    "Zoom": 0.59349102082249294
  }
}